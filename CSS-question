1、 两种盒模型分别说明下
    -- IE盒模型
        -- 在早期的IE浏览器中，IE5及以下甚至包括IE6，在混杂模式中，使用自己的非标准盒模型。
        -- 总宽度=定义的width+定义的margin
        -- 在CSS3中，新增了box-sizing属性，通过box-sizing属性设置为border-box使用这种IE盒模型
    -- W3C标准盒模型
        -- 盒模型的总宽度为：margin+padding+border+定义的width
        -- 在CSS3中，新增的box-sizing的默认属性content-box，即设置为W3C标准盒模型

2、 如何垂直居中？
    --  弹性布局，侧轴居中
    --  line-height与height保持一致
    --  display: table-cell 和 vertical-align: middle
    --  positioin: absolute 和 margin-top
    --  顶部和底部的padding设置同样高度

3、 Grid布局（网格布局）
    --  display: grid指定一个容器采用网格布局
        --  display: inline-grid, 默认情况下，容器元素都是块级元素，但也可以设成行内元素
        --  grid-template-columns属性定义每一列的列宽, 
            grid-template-rows属性定义每一行的行高 
            (除了使用绝对单位，也可以使用百分比)
            --  普通设置
                --  display: grid;
                    grid-template-columns: 33.33% 33.33% 33.33%;
                    grid-template-rows: 33.33% 33.33% 33.33%;
            --  可以使用repeat()函数，简化重复的值
                --  display: grid;
                    grid-template-columns: repeat(3, 33.33%);
                    grid-template-rows: repeat(3, 33.33%);
            --  auto-fill关键字表示自动填充
                --  display: grid;
                    grid-template-columns: repeat(auto-fill, 100px);
            --  方便表示比例关系，1fr和2fr，就表示后者是前者的两倍
                --  display: grid;
                    grid-template-columns: 1fr 1fr;
            --  minmax()函数产生一个长度范围，表示长度就在这个范围之中
                --  grid-template-columns: 1fr 1fr minmax(100px, 1fr);
            --  auto关键字表示由浏览器自己决定长度
                --  grid-template-columns: 100px auto 100px;
            --  grid-template-columns属性和grid-template-rows属性里面，
                还可以使用方括号，指定每一根网格线的名字，方便以后的引用
                --  display: grid;
                    grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];
                    grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];
        --  grid-row-gap 属性，设置行与行的间隔（行间距）
            --  grid-row-gap: 20px;
            grid-column-gap 属性，设置列与列的间隔（列间距）
            --  grid-column-gap: 20px;
            grid-gap 属性，grid-column-gap和grid-row-gap的合并简写形式
            （省略了第二个值，浏览器认为第二个值等于第一个值）
            --  grid-gap: <grid-row-gap> <grid-column-gap>;
        --  grid-template-areas 属性允许指定"区域"（area），用于定义区域
            --  display: grid;
                grid-template-columns: 100px 100px 100px;
                grid-template-rows: 100px 100px 100px;
                grid-template-areas:'a b c'
                                    'd e f'
                                    'g h i';
            --  多个单元格合并成一个区域的写法如下,代码将9个单元格分成a、b、c三个区域
                grid-template-areas:'a a a'
                                    'b b b'
                                    'c c c';
            --  如果某些区域不需要利用，则使用"点"（.）表示
                grid-template-areas:'a . c'
                                    'd . f'
                                    'g . i';
            --  区域的命名会影响到网格线。
                每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。
        --  grid-auto-flow
            --  划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。
                默认的放置顺序是"先行后列"，即先填满第一行，再开始放入第二行。
                这个顺序由grid-auto-flow属性决定，默认值是row，即"先行后列"。
                也可以将它设成column，变成"先列后行"
            --  grid-auto-flow属性除了设置成row和column，还可以设成row dense和column dense。
                这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。
                表示"先行后列"，并且尽可能紧密填满，尽量不出现空格
        --  justify-items属性设置单元格内容的水平位置（左中右）
            --  justify-items: start | end | center | stretch;
        --  align-items属性设置单元格内容的垂直位置（上中下）
            --  align-items: start | end | center | stretch;
        --  place-items属性是align-items属性和justify-items属性的合并简写形式
            --  place-items: <align-items> <justify-items>;
        --  justify-content属性是整个内容区域在容器里面的水平位置（左中右）
            --  justify-content: start | end | center | stretch | space-around | space-between | space-evenly
        --  align-content属性是整个内容区域的垂直位置（上中下）
            --  align-content: start | end | center | stretch | space-around | space-between | space-evenly;
        --  grid-auto-columns属性和grid-auto-rows属性用来设置，浏览器自动创建的多余网格的列宽和行高。
        --  grid-column-start 属性，
            grid-column-end 属性，
            grid-row-start 属性，
            grid-row-end 属性
            --  项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线
            --  span关键字，表示"跨越"，即左右边框（上下边框）之间跨越多少个网格
                grid-column-start: span 2;
            --  产生了项目的重叠，则使用z-index属性指定项目的重叠顺序
        --  grid-column属性是grid-column-start和grid-column-end的合并简写形式
            --  grid-column: <start-line> / <end-line>;
            grid-row属性是grid-row-start属性和grid-row-end的合并简写形式
            --  grid-row: <start-line> / <end-line>;
        --  grid-area属性指定项目放在哪一个区域
            --  grid-area: e;
        --  justify-self属性设置单元格内容的水平位置（左中右），
            跟justify-items属性的用法完全一致，但只作用于单个项目。
            --  justify-self: start | end | center | stretch;
        --  align-self属性设置单元格内容的垂直位置（上中下），
            跟align-items属性的用法完全一致，也是只作用于单个项目。
            --  align-self: start | end | center | stretch;