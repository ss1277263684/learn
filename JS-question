1、JS有哪几种数据类型
    -- Undefined,Null,Number,String,Boolean,Symbol以及Object（复杂数据类型）

2、变量声明提升？let、var、const的区别？
    -- 使用var声明变量，变量会自动提升到作用域顶部，为赋值时为undefined；
    -- let和const声明的范围是块作用域，且不会再作用域中被提升（暂时性死区），在全局作用域中声明的变量不会成为 window 对象的属性，
    -- var声明的范围是函数作用域，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明。
    -- const声明变量时必须同时初始化变量，尝试修改 const 声明的变量会导致运行时错误。

3、ES6语法你平常能用到哪些？
    -- let和const
    -- 解构赋值
    --- 函数和参数
        -- 箭头函数
        -- 参数默认值
        -- rest参数
    --- 内置函数
        -- 扩展运算符
        -- Array.from()
        -- find()和findindex()
        -- includes()
        -- includes(), startsWith(), endsWith()
        -- repeat()
    -- 新增对象Set

4、undefined和null有什么区别？
    --  null是一个表示"无"的对象，转为数值时为0；undefined是一个表示"无"的原始值，转为数值时为NaN
    --  null表示"没有对象"，即该处不应该有值
        --  作为函数的参数，表示该函数的参数不是对象。
        --  作为对象原型链的终点。
    --  undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义
        --  变量被声明了，但没有赋值时，就等于undefined。
        --  调用函数时，应该提供的参数没有提供，该参数等于undefined。
        --  对象没有赋值的属性，该属性的值为undefined。
        --  函数没有返回值时，默认返回undefined。

5、Promise、Promise.all、Promise.race 分别怎么用？
    --  function fn() {
            return new Promise((resolve, reject) => {
                resolve(val)    // 成功时调用
                reject(val)     // 失败时调用
            })
        }
        fn.then(successFn, failFn).then(successFn1, failFn1)    // 回调，可链式调用
    --  Promise.all([promise1, promise2]).then(success, fail)   
        用将多个Promise实例包装成一个新的Promise实例, 只有promise1和promise2都成功才会调用success
    --  Promise.race([promise1, promise2]).then(success, fail)  
        用将多个Promise实例包装成一个新的Promise实例, 只要promise1和promise2有一个成功就会调用success