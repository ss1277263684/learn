1、 讲一讲TCP协议的三次握手和四次挥手流程
    --  第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入SYN_SENT状态，等待服务器确认。SYN：同步序列编号（Synchronize Sequence Numbers）
    --  第二次握手：服务器接受syn包，必须确认客户的SYN（ack = x + 1），同时自己也发送一个SYN包（syn=y），即SYN+ACk包，此时服务器进入SYN_RECV状态；
    --  第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认ACK（ack=y+1）,此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手；
    --  四次挥手
        --  1）客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。
        --  2）服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。
        --  3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。
        --  4）服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。
        --  5）客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。
        --  6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。

2、 为什么连接的时候是三次握手，关闭的时候却是四次握手？
    为什么不能用两次握手进行连接？
    --  因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。
        其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，
        很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，"你发的FIN报文我收到了"。
        只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。
    --  如果服务器发送对这个延误的旧连接报文的确认的同时，客户端调用connect函数发起了连接，
        就会使客户端进入SYN_SEND状态，当服务器那个对延误旧连接报文的确认传到客户端时，
        因为客户端已经处于SYN_SEND状态，所以就会使客户端进入ESTABLISHED状态，
        此时服务器端反而丢弃了这个重复的通过connect函数发送的SYN包。
        而连接建立之后，发送包由于SEQ是以被丢弃的SYN包的序号为准，
        而服务器接收序号是以那个延误旧连接SYN报文序号为准，导致服务器丢弃后续发送的数据包

3、 OSI有哪七层模型？TCP/IP是哪四层模型？
    --  
        --  物理层：网卡、网线、集线器、中继器、调制解调器
        --  数据链路层：网桥、交换机
        --  网络层：路由器
        --  传输层：网关
            --  通信子网和资源子网的接口和桥梁，起到承上启下的作用
        --  会话层：用户应用程序和网络之间的接口
            --  向两个实体的表示层提供建立和使用连接的方法
        --  表示层：处理用户信息的表示问题，如编码、数据格式转换和加密解密
            --  对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层
        --  应用层：是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作
            --  负责完成网络中应用程序与网络操作系统之间的联系，建立与结束使用者之间的联系，并完成网络用户提出的各种网络服务及应用所需的监督、管理和服务等各种协议
    --  数据链路层、网络层、传输层和应用层




